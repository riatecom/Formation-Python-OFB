---
title: "Formation Python pour g√©omaticiens üêçüåè"
author: "Matthieu Viry"
subtitle: "11 D√©cembre 2023"
format:
  revealjs:
    embed-resources: false
    slide-number: true
    show-slide-number: all
    chalkboard: true
    logo: images/logos-footer.png
title-slide-attributes:
  data-background-image: images/logos-footer.png
  data-background-size: 42%
  data-background-position: 50% 90%
css: ['static/style.css']
prefer-html: true
---

# Introduction

## Pourquoi programmer ?

- **Automatiser** des t√¢ches r√©p√©titives
- **Prendre le contr√¥le** des analyses et des traitements que vous r√©alisez

## Historique et pr√©sentation sur le papier...

<img src="images/logo-python.png" style="position: absolute;top: 10px;right: 10px;width: 105px !important;height: auto;" />

<br>

- Langage cr√©√© √† la toute fin des ann√©es 80 - premi√®re version publique sortie en 1991.

- **Libre** (r√©git par la *Python Software Foundation License*, √©quivalent √† BSD)

- Langage **polyvalent**, **interpr√©t√©**, **multi-paradigme** (imp√©ratif, fonctionnel, OO, ..)

- **Typage dynamique fort** (et *duck typing*)

- Toujours en d√©veloppement actif (derni√®re version en avril 2023)

::: {.notes}


En 1989 aux Pays-Bas, Guido van Rossum invente le langage de programmation Python.
C‚Äôest un fan de la s√©rie t√©l√©vis√©e Monty Python‚Äôs Flying Circus, donc pour rendre un hommage √† la s√©rie il donne le nom Python.
Ce n‚Äôest qu‚Äôen 1991 que la premi√®re version de ce langage a √©t√© publi√©e.

C‚Äôest la Python Software Foundation qui se charge de d√©velopper Python et de faire vivre la communaut√© de d√©veloppeurs et utilisateurs.


- Il est multiplateforme : fonctionne sur des nombreux syst√®mes d‚Äôexploitation ;
- C'est un logiciel libre
- C‚Äôest un langage interpr√©t√© : le script python est directement ex√©cut√©, il n‚Äôa pas besoin d‚Äô√™tre compil√© avant d‚Äô√™tre ex√©cut√© ;
- C‚Äôest un langage orient√© objet : on peut cr√©er des programmes qui imite le comportement du monde r√©el ;
- Enfin, il est notamment utilis√© en bio-informatique, et plus couramment en analyse de donn√©es.


Sur le site web, la description en une phrase du projet est "Python is a programming language that lets you work quickly and integrate systems more effectively"

Pour sa part le projet **R** na√Æt en 1993 comme un projet de recherche de Ross Ihaka et Robert Gentleman √† l'universit√© d'Auckland.

- C'est une impl√©mentation du langage **S** (d√©velopp√© au milieu des ann√©es 70 dans les laboratoires Bell)

- **Libre** (licence *GNU GPL*)

- Langage **interpr√©t√©**, **multi-paradigme** (imp√©ratif, fonctionnel, OO, ..)

- **Typage dynamique**

- Toujours en d√©veloppement actif (derni√®re version en avril 2023)


Sur le site web, le titre est "The R Project for Statistical Computing" et la description en une phrase du projet est : "R is a free software environment for statistical computing and graphics".

:::

## Python / R

<br>

:::: {.columns}

::: {.column .medium width="50%"}

### Python

- *General-purpose programming language*

- *"Jack of all trades, master of none"* ?

- Utilis√© par Google, Facebook, Spotify, IBM, etc.

:::

::: {.column .medium width="50%"}


### R

- *For statistical computing and graphics*

- *"By statisticians, for statisticians"*

- Utilis√© par Google, Facebook, Microsoft, etc.

:::

::::

- Mais la question se pose car Python est de plus en plus comp√©tent pour l'analyse de donn√©es...

# Pr√©sentation de l'√©cosyst√®me

## Impl√©mentation de r√©f√©rence et distributions

- Une impl√©mentation de r√©f√©rence du langage [**Python**](https://www.python.org/) : [**CPython**](https://github.com/python/cpython)
  (mais d'autres impl√©mentations : Jython, IronPython, PyPy, etc.)

- Plusieurs *distributions* de Python (principalement [**Anaconda**](https://anaconda.org/), une distribution des langages de programmation Python et R d√©di√©e √† la science des donn√©es et √† l'apprentissage automatique)

<div class="center">
<img src="images/logo-anaconda.png" />
<p class="small">Source: <a href="https://anaconda.org">anaconda.org</a></p>
</div>

::: {.notes}

- CPython est l'impl√©mentation de r√©f√©rence de Python. C'est la version que la plupart des gens utilisent, notamment parce qu'elle est la plus facile √† installer et √† utiliser. Il est √©crit en langage C et est maintenu par la Python Software Foundation.

- Jython est une impl√©mentation de Python √©crite en Java. Il permet aux d√©veloppeurs d'√©crire des programmes Python qui peuvent √™tre ex√©cut√©s sur n'importe quelle machine virtuelle Java (JVM). Cela le rend particuli√®rement utile pour les d√©veloppeurs qui travaillent dans un environnement Java.

- IronPython est une impl√©mentation de Python √©crite en C# et destin√©e √† √™tre utilis√©e dans l'environnement .NET. Il permet aux d√©veloppeurs d'√©crire des programmes Python qui peuvent √™tre ex√©cut√©s sur la plate-forme .NET. Il est particuli√®rement utile pour les d√©veloppeurs qui travaillent dans un environnement .NET.

- PyPy est une impl√©mentation alternative de Python qui est destin√©e √† √™tre plus rapide que CPython. Il est √©crit en langage RPython et utilise une technique d'optimisation appel√©e compilation √† la vol√©e pour acc√©l√©rer l'ex√©cution des programmes.


Anaconda est une distribution gratuite et open source de Python et R, qui a √©t√© d√©velopp√©e pour simplifier le processus
d'installation et de gestion des packages, ainsi que le processus
de configuration et de gestion des environnements de d√©veloppement scientifique de donn√©es.

Il a √©t√© cr√©√© par Continuum Analytics, une entreprise qui a depuis √©t√© acquise par Anaconda, Inc.

Anaconda est livr√© avec une gamme compl√®te de biblioth√®ques scientifiques et de packages pr√©install√©s,
tels que NumPy, pandas, Matplotlib, SciPy, scikit-learn, TensorFlow et Jupyter Notebook, pour n'en citer que quelques-uns.
Il est √©galement facile √† √©tendre avec des packages tiers, en utilisant le gestionnaire de packages conda, qui permet de t√©l√©charger et d'installer des packages √† partir de sources externes.

L'un des avantages les plus importants d'Anaconda est son syst√®me de gestion d'environnement,
qui permet de cr√©er des environnements Python isol√©s pour diff√©rents projets.

:::

## Environnements de d√©veloppement

- Plusieurs IDE appr√©ci√©s par les utilisateurs de Python : [**Spyder**](https://www.spyder-ide.org/) (IDE "scientifique", interface comparable √† RStudio),
  [**PyCharm**](https://www.jetbrains.com/pycharm/) (logiciel propri√©taire, plut√¥t pour d√©velopper des biblioth√®ques), [**Jupyter Lab**](https://jupyter.org/)
  et plus r√©cemment [**Visual Studio Code**](https://code.visualstudio.com/).


<img src="images/spyder.png" style="float:left; width: 46%;" />

<img src="https://www.jetbrains.com/pycharm/img/screenshots/complexLook@2x.jpg" style="float:right; width: 46%;"/>

## Packages additionnels (biblioth√®ques)


## Documentation / Python

::: {.medium}
Un point fort de Python est sa documentation officielle, qui contient tout le n√©cessaire pour utiliser le langage de mani√®re proactive
(tutoriel, r√©f√©rence de l'ensemble des fonctions / objets de tous les modules de la biblioth√®que standard, etc.)
et qui est mise √† disposition dans plusieurs langues (Anglais, Fran√ßais, Espagnol, Cor√©en, Japonais, Chinois, etc.).
:::

![](images/python-documentation.png)


## Documentation / Python


Il n'existe toutefois pas un seul standard pour consulter la documentation des diff√©rents modules additionnels Python
(cf. [Documentation Matplotlib](https://matplotlib.org/stable/api/index), [Documentation pandas](https://pandas.pydata.org/docs/reference/index.html#api)).

<img src="images/doc-geopandas.png" style="width: 40%; position: absolute; border: solid 1px black; left: 10px;" />

<img src="images/doc-matplotlib.png" style="width: 40%; position: absolute; border: solid 1px black; bottom: -60px; left: 29%;" />

<img src="images/doc-samgeo.png" style="width: 40%; position: absolute; border: solid 1px black; right: 10px;" />

# En terme de syntaxe √ßa donne quoi ?

## Premier pas avec la syntaxe Python

<br><br>

```{python}
#| error: true
#| echo: true
#| message: true
#| cache: true
from statistics import mean, stdev

def cv(x):
    moy = mean(x)
    s = stdev(x)
    result = s / moy
    return result

print(cv([5, 6, 3, 8, 9, 12]))
```

## Python et l'indentation du code...

<br>

```{python}
#| error: true
#| echo: true
#| message: true
#| cache: true
my_list = [1, 2, 3]

for item in my_list:
    if item % 2 == 0:
        print('even')
    else:
    print('odd')
```

## Python et l'indentation du code...

<br>

```{python}
#| error: true
#| echo: true
#| message: true
#| cache: true
my_list = [1, 2, 3]

for item in my_list:
    if item % 2 == 0:
        print('even')
    else:
        print('odd')
```

## Python et l'indentation du code...

<br>

- Respecter les r√®gles d‚Äôindentations est *obligatoire* en Python.

- Ce n'est pas une *contrainte* lors d'une session de travail car les IDE guident la position du curseur.

- Cette indentation a un r√¥le direct sur le contr√¥le du flux d'ex√©cution.

- Elle permet notamment d'√©viter l'utilisation d'accolades (*curly brackets*) pour d√©limiter les blocs et de point-virgules pour d√©limiter les instructions.


## Python et l'indentation du code...

<br>

Le code qui suit est volontairement incorrect mais ne g√©n√®re pas d'erreur lors de l'ex√©cution :

```{python}
#| echo: true
li1 = [1, 2, 3, 4, 5, 6]
li2 = [4, 20, 31, 87, 123, 621]

# Additionnons les deux listes, √©l√©ments par √©l√©ments,
# et stockons chaque r√©sultat dans une nouvelle liste
result = []

for item1, item2 in zip(li1, li2):
    new_item = item1 + item2
result.append(new_item)

print(result)
```

## Python et l'indentation du code...

<br>

Une fois l'indentation corrig√©e...

```{python}
#| echo: true
li1 = [1, 2, 3, 4, 5, 6]
li2 = [4, 20, 31, 87, 123, 621]

# Additionnons les deux listes, √©l√©ments par √©l√©ments,
# et stockons chaque r√©sultat dans une nouvelle liste
result = []

for item1, item2 in zip(li1, li2):
    new_item = item1 + item2
    result.append(new_item)

print(result)
```


# *Data structures* natives

:::{.small}
*Les structures de donn√©es sont les √©l√©ments fondamentaux autour desquels vous construisez vos programmes. Chaque structure de donn√©es fournit une mani√®re particuli√®re d'organiser les donn√©es afin d'y acc√©der efficacement.*
:::

## Python

<br>

:::{.medium}

Python est livr√© avec un ensemble complet de structures de donn√©es dans sa biblioth√®que standard :

- `dict` (tableau associatif)

```{python}
#| echo: true
my_dict = { 'john': 32, 'jane': 27, 'jack': 30 }
print(my_dict['john'])
```

- `tuple` (un conteneur immuable),

```{python}
#| echo: true
my_coordinates = (2.349014, 48.864716)
```

- `list` (tableau dynamique mutable),

```{python}
#| echo: true
my_list = ['a', 12, (2.349014, 48.864716), { "foo": 42 }]
```

- `array` (tableau typ√© de base), `enum` (√©num√©ration), etc.

:::

## Python *(classes)*

<br>

Comme il s'agit d'un langage orient√©-objet, il est √©galement possible de d√©finir des classes, permettant de facilement mod√©liser des cat√©gories d'objets...

```{python}
#| echo: true
class Point:
    def __init__(self, x, y):
      self.x = x
      self.y = y

    def distance(self, other):
      return (
        (other.x - self.x) ** 2 + (other.y - self.y) ** 2
      ) ** 0.5
```

## Python *(classes)*

<br>
<br>

Instanciation et utilisation :

```{python}
#| echo: true
p1 = Point(2, 6)
p2 = Point(9, 9)

print('Distance = ', p1.distance(p2))
```

# Et c√¥t√© s√©mantique ?

## Python

S√©mantique *pass-by-assignment* et diff√©rence entre types muables et immuables :

```{python}
#| echo: true
# le type list est muable
a = [1, 3, 5]
b = a # 'a' et 'b' pointent vers le m√™me objet

b[2] = 11 # Modifie l'objet vers lequel pointe 'b' qui est √©galement celui vers lequel pointe 'a'
```

```{python}
#| echo: true
i = 5 # les entiers sont immuables
j = i
i = i + 1 # la valeur 5 ne peut pas √™tre modifi√©e, un nouvel objet est cr√©√© ici

print(i) # 6
print(j) # 5
```

:::{.medium}
Pour en savoir plus sur ce point : [Documentation officielle -  Questions fr√©quemment pos√©es sur Python](https://docs.python.org/fr/3/faq/programming.html#why-did-changing-list-y-also-change-list-x)
:::

:::{.notes}

Les instructions d'affectation en Python ne copient pas les objets, elles cr√©ent des liens entre une cible et un objet.
Pour les collections qui sont mutables ou qui contiennent des √©l√©ments mutables, une copie est parfois n√©cessaire afin de pouvoir modifier une copie sans modifier l'autre.

Copie superficielle (*Shallow copy*) vs. profonde (*deep copy*).

:::

## Indices

<br>

- En Python les indices de liste commencent √† 0 :

```{python}
#| echo: true
my_list = [1, 3, 5]
print(my_list[0])
```

- En R ils commencent √† 1 :

```{r}
#| echo: true
my_list <- list(1, 3, 5)
print(my_list[1])
```

## Maintenabilit√© du code

<br>

```{python}
#| echo: true
class Point:
    def __init__(self, x, y):
      self.x = x
      self.y = y

    def distance(self, other):
      return (
        (other.x - self.x) ** 2 + (other.y - self.y) ** 2
      ) ** 0.5
```

## Maintenabilit√© du code

<br>

```{python}
#| echo: true
class Point:
    def __init__(self, x: float, y: float) -> None:
      self.x = x
      self.y = y

    def distance(self, other: Point) -> float:
      return (
        (other.x - self.x) ** 2 + (other.y - self.y) ** 2
      ) ** 0.5
```

- [_**Type hint**_](https://docs.python.org/fr/3/library/typing.html) ...
- \+ analyse statique du code ([*mypy*](https://www.mypy-lang.org/), IDE, etc.)

# Mise en place d'un environnement de travail Python

## Installation de Python

:::{.very-small}

1. T√©l√©charger et installer [Anaconda](https://www.anaconda.com/products/individual) :
   - Une fois le fichier t√©l√©charg√©, double-cliquez dessus
   - Accepter les termes de la licence
   - Choisir d'installer Anaconda seulement pour l'utilisateur courant (*Just me*) et non pas pour tous les utilisateurs (*All users*)
   - S√©lectionner le chemin d'installation (ou laisser celui par d√©faut - attention √† √©viter les chemins avec des espaces et/ou des caract√®res unicodes)
   - Accepter ensuite les options par d√©faut jusqu'√† la fin de l'installation (sur la derni√®re fen√™tre "Thanks for installing Anaconda", vous pouvez d√©cocher les deux cases et cliquer sur "Finish")
2. T√©l√©charger l'IDE [VS Codium](https://vscodium.com/) (version libre de [Visual Studio Code](https://code.visualstudio.com/)) pour votre syst√®me d'exploitation :
   - Vous pouvez utilisez le lien direct suivant : https://github.com/VSCodium/vscodium/releases/download/1.84.2.23319/VSCodiumUserSetup-x64-1.84.2.23319.exe
   - Cliquer sur l'installeur et suivez les instructions en laissant les options par d√©faut
   - Une fois l'installation termin√©e, ouvrez VS Codium
3. Installer l'extension [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) dans VS Codium :
   - Dans VS Codium, appuyez sur Ctrl + P et saisissez le texte suivant dans le menu qui s'ouvre : "ext install ms-python.python".
   - Validez avec "Entr√©e"
4. Installer l'extension [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) dans VS Codium :
   - Dans VS Codium, appuyez sur Ctrl + P et saisissez le texte suivant dans le menu qui s'ouvre : "ext install ms-toolsai.jupyter".
   - Validez avec "Entr√©e"
5. S√©lectionner l'interpr√©teur Python dans VS Codium :
   - Dans VS Codium, appuyez sur Ctrl + Shift + P et saisissez / s√©lectionnez "Python: Select Interpreter" dans le menu qui s'ouvre, appuyez sur "Entr√©e" puis choisissez l'interpr√©teur Python que nous venons d'installer avec Anaconda : `Python 3.9.7 64-bit ('base': conda)`.

:::